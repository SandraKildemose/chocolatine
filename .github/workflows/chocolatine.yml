name: chocolatine

on:
  push:
    branches-ignore:
      - "ga-ignore-*"
  pull_request:
    branches-ignore:
      - "ga-ignore-*"

env:
  MIRROR_URL: "git@github.com:Remi-Mergen/chocolatine-mirror.git"
  EXECUTABLES: "binary"
  ARGUMENTS: ""

jobs:
  coding_style_check:
    name: "Check coding style using Epitech's container"
    runs-on: ubuntu-latest
    container: ghcr.io/epitech/coding-style-checker:latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Run style checker
        run: |
          check.sh /github/workspace /github/workspace

      - name: Report style violations
        run: |
          if [ -f /github/workspace/coding-style-reports.log ]; then
            while IFS= read -r line; do
              file=$(echo "$line" | cut -d: -f1)
              line_number=$(echo "$line" | cut -d: -f2)
              severity=$(echo "$line" | cut -d: -f3)
              message=$(echo "$line" | cut -d: -f4-)
              echo "::error file=${file},line=${line_number},title=${severity}::${message}"
            done < /github/workspace/coding-style-reports.log

            exit 1
          else
            echo "✅ No style issues detected"
          fi

  repo_cleanliness:
    name: "Scan repository for unwanted files"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Detect and report unwanted files
        run: |
          files=$(find . -type f \( -name "*~" -o -name "*.o" -o -name "*.so" -o -name "*.gcno" -o -name "*.gcda" -o -name "*.gcov" -o -name "*#" -o -name "#*" -o -name "*pain_au_chocolat*" \))
          if [ -n "$files" ]; then
            echo "$files" | while read file; do
              echo "::error file=${file}::Unwanted file found"
            done
            exit 1
          else
            echo "✅ No unwanted files found"
          fi

  compilation_check:
    name: "Compile project and run executables"
    runs-on: ubuntu-latest
    container: epitechcontent/epitest-docker:latest
    needs: [repo_cleanliness]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Build with make
        run: make
        timeout-minutes: 2

      - name: Clean build
        run: make clean

      - name: Test executables
        run: |
          IFS=',' read -ra bins <<< "${EXECUTABLES}"
          for bin in "${bins[@]}"; do
            if [ -x "$bin" ]; then
              echo "Running $bin $ARGUMENTS"
              "./$bin" $ARGUMENTS
            else
              echo "::error file=$bin::Executable not found or not executable"
              exit 1
            fi
          done

  unit_tests:
    name: "Run unit tests (criterion)"
    runs-on: ubuntu-latest
    container: epitechcontent/epitest-docker:latest
    needs: [compilation_check]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Run tests
        run: make tests_run
        timeout-minutes: 2

  mirror_push:
    name: "Mirror push to secondary repo"
    runs-on: ubuntu-latest
    needs: [unit_tests]
    if: github.event_name == 'push'
    steps:
      - name: Checkout full history
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Mirror to remote repo
        uses: pixta-dev/repository-mirroring-action@v1
        with:
          target_repo_url: ${{ env.MIRROR_URL }}
          ssh_private_key: ${{ secrets.GIT_SSH_PRIVATE_KEY }}
